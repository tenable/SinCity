---
- block:
    # TODO: This might not be working properly, need to re-check this
    - name: Ensure DNS zone exists for domain trusts
      community.windows.win_dns_zone:
        name: '{{ item.key }}'
        type: forwarder
        replication: none
        dns_servers:
          - '{{ network.domains[item.key].dc.ip }}'
      loop: '{{ domain_info.trusts | dict2items }}'

    # source : https://social.technet.microsoft.com/wiki/contents/articles/11911.active-directory-powershell-how-to-create-forest-trust.aspx
    - name: Add trusts between domain
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $RemoteForest,

              [String]
              $RemoteAdmin,

              [String]
              $RemoteAdminPassword,

              [String]
              $TrustDirection
          )
          $localforest=[System.DirectoryServices.ActiveDirectory.Forest]::getCurrentForest()
          try {
            $localForest.GetTrustRelationship($RemoteForest)
            $Ansible.Changed = $false
          } catch [System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException] {
            $Ansible.Changed = $true
            $remoteContext = New-Object -TypeName "System.DirectoryServices.ActiveDirectory.DirectoryContext" -ArgumentList @( "Forest", $RemoteForest, $RemoteAdmin, $RemoteAdminPassword)
            $distantForest = [System.DirectoryServices.ActiveDirectory.Forest]::getForest($remoteContext)
            $localForest.CreateTrustRelationship($distantForest,$TrustDirection)
          }
        error_action: stop
        parameters:
          RemoteForest: '{{ item.key }}'
          RemoteAdmin: '{{ network.domains[item.key].domain_admin.username }}@{{ item.key }}'
          RemoteAdminPassword: '{{ network.domains[item.key].domain_admin.password }}'
          TrustDirection: '{{ item.value.direction | default("Bidirectional") }}'
      register: trust_result
      loop: '{{ domain_info.trusts | dict2items }}'

    - name: 'Reboot and wait for the AD system to restart'
      win_reboot:
        test_command: 'Get-ADUser -Identity Administrator -Properties *'
      when: trust_result.changed

  vars:
    domain_info: '{{ network.domains[network.dcs_map[inventory_hostname]] }}'

  when: domain_info.trusts is defined
