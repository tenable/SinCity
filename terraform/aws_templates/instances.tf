# Autogenerated instances
{% if 'hosts' in network %}
  {% for key,value in network.hosts.items() %}
resource "aws_instance" "{{ key }}" {
  ami                         = "{{ network.server_roles[value.role].providers.aws.image }}"
  instance_type               = "{{ network.server_roles[value.role].instance_type }}"
  private_ip                  = "{{ value.ip }}"
  key_name                    = aws_key_pair.default.key_name
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.{{ value.subnet | default(value.domain.split('.')[0] if 'domain' in value else '') }}.id
  vpc_security_group_ids      = {{ value.security_groups | default(['allow_sincity']) | to_terraform_array('aws_security_group', 'id') }}

  tags = merge(
    var.additional_tags,
    {
      Name               = "{{ value.name }}",
      "Application Role" = "{{ value.role }}",
      "Operating System" = "{{ value.type }}"
  })

  {% if 'instance_role' in value %}
  iam_instance_profile = aws_iam_instance_profile.{{ key }}_instance_profile.name
  {% endif %}

  user_data = file("{{ '../../resources/configure_for_ansible.ps1' if value.type == 'windows' else '../../resources/configure_for_ansible.sh' }}")
}

    {% if 'instance_role' in value %}
resource "aws_iam_instance_profile" "{{ key }}_instance_profile" {
  name = "{{ key }}_instance_profile"
  role = aws_iam_role.{{ value.instance_role }}.name
}
    {% endif %}
  {% endfor %}
{% endif %}