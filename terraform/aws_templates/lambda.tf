{% if 'cloud' in network and 'aws' in network.cloud and 'lambda' in network.cloud.aws %}
  {% for key, value in network.cloud.aws.lambda.items() %}
# Autogenerated lambda
resource "aws_iam_role" "iam_for_lambda_{{ key }}" {
  name = "iam_for_lambda_{{ key }}"

  assume_role_policy = <<EOF
{{ value.policy|safe }}
EOF
}

data "archive_file" "init" {
  type        = "zip"
  source_file = "{{ value.source_file }}"
  output_path = "{{ value.zip_output }}"
}

resource "aws_lambda_function" "{{ key }}" {
  # If the file is not in the current working directory you will need to include a
  # path.module in the filename.
  filename      = "{{ value.zip_output }}"
  function_name = "hello_lambda"
  role          = aws_iam_role.iam_for_lambda_{{ key }}.arn
  handler       = "{{ value.handler }}"


  runtime = "{{ value.runtime }}"

  environment {
    {{ value.environment | to_terraform_json(2, True) | safe }}
  }
}
# Autogenerated lambda end
  {% endfor %}
{% endif %}

# resource "aws_iam_role" "iam_for_lambda" {
#   name = "iam_for_lambda"

#   assume_role_policy = <<EOF
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Action": "sts:AssumeRole",
#       "Principal": {
#         "Service": "lambda.amazonaws.com"
#       },
#       "Effect": "Allow",
#       "Sid": ""
#     }
#   ]
# }
# EOF
# }

# data "archive_file" "init" {
#   type        = "zip"
#   source_file = "../../resources/terraform/hello_lambda.py"
#   output_path = "../../resources/terraform/hello_lambda.zip"
# }

# resource "aws_lambda_function" "test_lambda" {
#   # If the file is not in the current working directory you will need to include a
#   # path.module in the filename.
#   filename      = "../../resources/terraform/hello_lambda.zip"
#   function_name = "hello_lambda"
#   role          = aws_iam_role.iam_for_lambda.arn
#   handler       = "hello_lambda.lambda_handler"


#   runtime = "python3.8"

#   environment {
#     variables = {
#       token = "mybigassnotsafepassword"
#     }
#   }
# }